BROKER SCHEMA com.yesbank.esb


CREATE COMPUTE MODULE XML2JSON
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CREATE LastChild of Environment.Value DOMAIN('XMLNSC'); 
        SET Environment.Value.XMLNSC = InputRoot.XMLNSC;
		
		SET Environment.Value.XMLNSC.(XMLNSC.Element)*[1].*:schemaLocation = NULL;
		DECLARE I1 INTEGER CARDINALITY(Environment.Value.XMLNSC.(XMLNSC.Element)*[1].(XMLNSC.NamespaceDecl)*[]);
		DECLARE I2 INTEGER 1;
		WHILE I2 <= I1 DO
			SET Environment.Value.XMLNSC.(XMLNSC.Element)*[1].(XMLNSC.NamespaceDecl)*[1] = NULL;
			SET I2 = I2 + 1;
		END WHILE;	
		
		IF(Environment.Variable.InnerNameSpaceStripoff ='true')THEN
		CALL ChangeNamespaceInOutputRoot (Environment.Value.XMLNSC, '', '');
	    END IF;
		
		Set OutputRoot.JSON.Data = Environment.Value.XMLNSC;
		CALL createJSONArraysXPATH(OutputRoot.JSON.Data,Environment);
		CALL RemoveNullObjectInJson(OutputRoot.JSON.Data);
		--SET OutputRoot.HTTPInputHeader."Content-Type"='application/json';
        RETURN TRUE;
	END;






CREATE FUNCTION ChangeNamespaceInOutputRoot(In rootNode REFERENCE, In oldNamespace CHARACTER, In newNamespace CHARACTER)
BEGIN
	
	DECLARE CHECKSIBLING BOOLEAN FALSE;
	--
	-- DEPTH determines when to finish.  
	-- Every time we MOVE FIRSTCHILD we add 1 to DEPTH
	-- Every time we MOVE PARENT we subtract 1 from DEPTH
	-- MOVE NEXTSIBLING does not change DEPTH
	-- Initial value is 1, so we are finished when DEPTH = 0
	--
	DECLARE DEPTH INTEGER 1;
	--
	-- Walk the tree top to bottom, left to right
	--
	WHILE DEPTH <> 0 DO 
		IF CHECKSIBLING = FALSE THEN 
			MOVE rootNode FirstChild;
		 	IF LASTMOVE(rootNode) = TRUE THEN
				SET DEPTH = DEPTH + 1;
				CALL ChangeNamespace(rootNode, oldNamespace, newNamespace);
		 	ELSE
		 		MOVE rootNode NEXTSIBLING;
			 	IF LASTMOVE(rootNode) = TRUE THEN
					CALL ChangeNamespace(rootNode, oldNamespace, newNamespace);
					SET CHECKSIBLING = FALSE;
			 	ELSE
					SET DEPTH = DEPTH - 1;
					Move rootNode PARENT;		 		
					SET CHECKSIBLING = TRUE;
				END IF;
		 	END IF;	
		ELSE
			MOVE rootNode NEXTSIBLING;
		 	IF LASTMOVE(rootNode) = TRUE THEN
				CALL ChangeNamespace(rootNode, oldNamespace, newNamespace);
				SET CHECKSIBLING = FALSE;
		 	ELSE
				SET DEPTH = DEPTH - 1;
				Move rootNode PARENT;		 		
				SET CHECKSIBLING = TRUE;
			END IF;
		END IF;
	END WHILE;
END;

CREATE FUNCTION ChangeNamespace(IN rootNode REFERENCE, In oldNamespace CHARACTER, In newNamespace CHARACTER)
BEGIN
	--
	-- Check for elements/attributes with the source namespace		
	--
    IF (FIELDTYPE(rootNode) = Name) OR (FIELDTYPE(rootNode) = NameValue) THEN
		IF FIELDNAMESPACE(rootNode) IS NOT NULL  THEN 
			--
			-- Set the new target namespace
			--
			--SET rootNode NAMESPACE = newNamespace;
			--
			-- Get rid of any inline namespace definitions
			--
			SET rootNode.(XMLNSC.NamespaceDecl)* = NULL;
		END IF;
    END IF;
END;
	-- Walk the tree recursively starting at inRef. 
	-- Replace all sequences of same-named elements with a JSON array.
	-- A JSON array has a name and some child elements with values. 
	-- The array element must have field type JSON.Array.
	-- The child elements that hold the values can optionally have names. 
	CREATE PROCEDURE createJSONArrays(IN root REFERENCE ) 
	BEGIN
		-- track the start and end of 'arrays' ( sequences of same-named siblings )
		DECLARE firstArrayElementRef REFERENCE TO root;
		DECLARE siblingRef REFERENCE TO root;
		DECLARE arraySize INTEGER 0;

		WHILE LASTMOVE(siblingRef) DO
			
			-- Process any child elements first 
			DECLARE firstChildRef REFERENCE TO siblingRef;
			MOVE firstChildRef FIRSTCHILD;
			IF LASTMOVE(firstChildRef) THEN
				CALL createJSONArrays(firstChildRef);
			END IF;

			-- IF this sibling's name is different from the previous one.
			IF FIELDNAME(siblingRef) = FIELDNAME(firstArrayElementRef) THEN
				SET arraySize = arraySize + 1;
			ELSE
				-- IF there was a sequence of two or more siblings with the same name
				IF arraySize > 1 THEN
					CALL createJSONArray(firstArrayElementRef, arraySize);
				END IF;				

				-- start scanning for a new array
				MOVE firstArrayElementRef TO siblingRef;
				SET arraySize = 1;
			END IF;
			
			MOVE siblingRef NEXTSIBLING;
		END WHILE;
		
		IF arraySize > 1 THEN
			CALL createJSONArray(firstArrayElementRef, arraySize);
		END IF;
	END;

	CREATE PROCEDURE createJSONArray(IN firstArrayElementRef REFERENCE, IN arraySize INTEGER) BEGIN
		-- Create a parent element for the array
		DECLARE arrayParentRef REFERENCE TO firstArrayElementRef;
		CREATE PREVIOUSSIBLING OF firstArrayElementRef 
			AS arrayParentRef 
			TYPE JSON.Array 
			NAMESPACE FIELDNAMESPACE(firstArrayElementRef) 
			NAME FIELDNAME(firstArrayElementRef);
			
		-- Make the array members children of the new parent element
		DECLARE pos INTEGER 1;
		WHILE pos <= arraySize DO
			DECLARE tempRef REFERENCE TO firstArrayElementRef;
			-- advance the reference. This should never fail because we have
			-- already walked all of these siblings to discover the array.
			MOVE firstArrayElementRef NEXTSIBLING;

			DETACH tempRef;
			ATTACH tempRef TO arrayParentRef AS LASTCHILD;
			
			SET pos = pos + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;
