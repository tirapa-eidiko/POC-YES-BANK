

BROKER SCHEMA com.yesbank.upiservice

PATH com.yesbank.esb;

CREATE COMPUTE MODULE GetHashKey_RequestEnv
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		DECLARE inputref REFERENCE TO InputRoot.XMLNSC.*:GetHashKeyReq.*:ReqBody;

		SET OutputRoot.JSON.Data.customerID = inputref.*:CustomerId;
		-- AUDIT_LOGGING
		CALL AuditMessage(OutputRoot.*[<],'BackendRequest:Robosoft API',Environment,2);

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE GetHashKey_API_RES
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- AUDIT_LOGGING
		CALL AuditMessage(InputRoot.*[<],'BackendResponse:Robosoft API',Environment,2);

		IF(InputRoot.BLOB.BLOB IS NOT NULL)THEN
		THROW USER EXCEPTION MESSAGE 3021 VALUES ('Received fault from Host' || CAST(ASBITSTREAM(InputRoot.BLOB) AS CHAR CCSID 1208));
	END IF;

	DECLARE envRef REFERENCE TO Environment.Variables;

	SET OutputRoot.XMLNSC.namespace:GetHashKeyRes.namespace:ResHdr.ConsumerContext.RequesterID = envRef.ChannelId;
	SET OutputRoot.XMLNSC.namespace:GetHashKeyRes.namespace:ResHdr.ServiceContext.ServiceName = envRef.ServiceName;
	SET OutputRoot.XMLNSC.namespace:GetHashKeyRes.namespace:ResHdr.ServiceContext.ReqRefNum = envRef.TxnRefNo;
	SET OutputRoot.XMLNSC.namespace:GetHashKeyRes.namespace:ResHdr.ServiceContext.ReqRefTimeStamp = envRef.TxnDateTime;
	SET OutputRoot.XMLNSC.namespace:GetHashKeyRes.namespace:ResHdr.ServiceContext.ServiceVersionNo = envRef.ServiceVersionNo;
	SET OutputRoot.XMLNSC.namespace:GetHashKeyRes.namespace:ResHdr.ServiceResponse.EsbResTimeStamp = CURRENT_TIMESTAMP;
	SET Environment.Variables.MessageFlowName = SQL.MessageFlowLabel;

	DECLARE inpRef REFERENCE TO InputRoot.JSON.Data;

	IF inpRef.status = '0' THEN
		SET OutputRoot.XMLNSC.namespace:GetHashKeyRes.namespace:ResHdr.ServiceResponse.EsbResStatus = inpRef.status;
		-- SET OutputRoot.XMLNSC.namespace:GetHashKeyRes.*:ResBody.*:Key = inpRef.key;
		IF Environment.Variables.ChannelId = 'RNB'  OR Environment.Variables.ChannelId = 'OBD' THEN
			SET OutputRoot.XMLNSC.namespace:GetHashKeyRes.namespace:ResBody.namespace:Key = inpRef.key;
		ELSE
			SET OutputRoot.XMLNSC.namespace:GetHashKeyRes.*:ResBody.*:Key = inpRef.key;
		END IF;

	ELSE

		SET OutputRoot.XMLNSC.namespace:GetHashKeyRes.namespace:ResHdr.ServiceResponse.EsbResStatus = '1';
		SET OutputRoot.XMLNSC.namespace:GetHashKeyRes.namespace:ResHdr.ErrorDetails.ErrorInfo.ErrSrc = 'FAILURE';
		SET OutputRoot.XMLNSC.namespace:GetHashKeyRes.namespace:ResHdr.ErrorDetails.ErrorInfo.HostErrCode = inpRef.status;
		SET OutputRoot.XMLNSC.namespace:GetHashKeyRes.namespace:ResHdr.ErrorDetails.ErrorInfo.HostErrDesc = inpRef.message;

	END IF;

	IF(Environment.Variables.JSONMessage = TRUE) THEN

	SET Environment.VariablesXpath.Array[1] = COALESCE(Environment.Variables.Operation.Name,'')||'Res.ResHdr.ErrorDetails';
	-- XML2JSON
	CALL XML2JSONXPATHPROC(OutputRoot,Environment);
	-- AUDIT_LOGGING
	CALL AuditMessage(OutputRoot.*[<],'ESBResponseSent',Environment,2);
	SET OutputLocalEnvironment.Destination.HTTP.RequestIdentifier = CAST(Environment.Variables.RequestIdentifier AS BLOB);
	PROPAGATE TO TERMINAL 'out1';

	RETURN FALSE;
END IF;
-- AUDIT_LOGGING
CALL AuditMessage(OutputRoot.*[<],'ESBResponseSent',Environment,2);
SET OutputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier = CAST(Environment.Variables.RequestIdentifier AS BLOB);

RETURN TRUE;
END;

CREATE PROCEDURE CopyMessageHeaders() BEGIN
	DECLARE I INTEGER 1;
	DECLARE J INTEGER;
	SET J = CARDINALITY(InputRoot.*[]);
	WHILE I < J DO
		SET OutputRoot.*[I] = InputRoot.*[I];
		SET I = I + 1;
	END WHILE;
END;

CREATE PROCEDURE CopyEntireMessage() BEGIN
	SET OutputRoot = InputRoot;
END;
END MODULE;

